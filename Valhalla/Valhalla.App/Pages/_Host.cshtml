@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace Valhalla.App.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="Valhalla.App.styles.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css" integrity="sha384-zCbKRCUGaJDkqS1kPbPd7TveP5iyJE0EjAuZQTgFLD2ylzuqKfdKlfG/eSrtxUkn" crossorigin="anonymous">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css">

    <link href="_content/Blazorise/blazorise.css" rel="stylesheet" />
    <link href="_content/Blazorise.Bootstrap/blazorise.bootstrap.css" rel="stylesheet" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.min.js" integrity="sha384-VHvPCCyXqtD5DqJeNxl2dtTyhF78xXNXdkwX1CZeRusQfRKp+tA7hAShOK/B/fQ2" crossorigin="anonymous"></script>
    <script src="_content/BlazorInputFile/inputfile.js"></script>

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            Ocorreu um erro e o aplicativo não está repondendo, e a pagina precisará ser reiniciada.
        </environment>
        <environment include="Development">
            Ocorreu um erro, veja a janela de desenvolvimento do navegador para mais detalhes.
        </environment>
        <a href="" class="reload">Recarrear a página</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>

    <script>
        window.PlayAudioFile = (src) => {
            var audio = document.getElementById('player');
            if (audio != null) {
                var audioSource = document.getElementById('playerSource');
                if (audioSource != null) {
                    audioSource.src = src;
                    audio.load();
                    audio.play();
                }
            }
        }

        var GLOBAL = {};
        GLOBAL.DotNetReference = null;
        GLOBAL.SetDotnetReference = function (pDotNetReference) {
            GLOBAL.DotNetReference = pDotNetReference;
        };


        var audioBackground;
        window.PlayAudioFileBackground = (src, dotnethelper) => {
            audioBackground = document.getElementById('playerBackground');
            if (audioBackground != null) {

                audioBackground.onplay = function () {
                    GLOBAL.DotNetReference.invokeMethodAsync('HandleAudioPlayed');
                };

                audioBackground.onpause = function () {
                    GLOBAL.DotNetReference.invokeMethodAsync('HandleAudioPaused');
                };

                audioBackground.onended = function () {
                    GLOBAL.DotNetReference.invokeMethodAsync('HandleAudioStoped');
                };

                var audioBackgroundSource = document.getElementById('playerSourceBackground');
                if (audioBackgroundSource != null) {
                    audioBackgroundSource.src = src;
                    audioBackground.load();
                    audioBackground.play();
                }
            }
        }

        window.StopAudioFile = () => {
            audioBackground = document.getElementById('playerBackground');
            if (audioBackground != null) {
                var audioBackgroundSource = document.getElementById('playerSourceBackground');
                if (audioBackgroundSource != null) {
                    audioBackground.pause();
                }
            }
        }


        //Usado para setar foco nos controles
        function focusElementByID(id) {
            const element = document.getElementById(id);
            element.focus();
        }

        function focusElementByName(name) {
            const element = document.getElementsByName(name)[0];
            element.focus();
        }

        function clearElementByID(id) {
            const element = document.getElementById(id);
            element.value = "";
        }

        function clearElementByName(name) {
            const element = document.getElementsByName(name)[0];
            element.value = "";
        }

        //Usado para download de arquivos
        function BlazorDownloadFile(filename, contentType, content) {
            // Blazor marshall byte[] to a base64 string, so we first need to convert the string (content) to a Uint8Array to create the File
            const data = base64DecToArr(content);

            // Create the URL
            const file = new File([data], filename, { type: contentType });
            const exportUrl = URL.createObjectURL(file);

            // Create the <a> element and click on it
            const a = document.createElement("a");
            document.body.appendChild(a);
            a.href = exportUrl;
            a.download = filename;
            a.target = "_self";
            a.click();

            // We don't need to keep the url, let's release the memory
            URL.revokeObjectURL(exportUrl);
        }

        // Convert a base64 string to a Uint8Array. This is needed to create a blob object from the base64 string.
        // The code comes from: https://developer.mozilla.org/fr/docs/Web/API/WindowBase64/D%C3%A9coder_encoder_en_base64
        function b64ToUint6(nChr) {
            return nChr > 64 && nChr < 91 ? nChr - 65 : nChr > 96 && nChr < 123 ? nChr - 71 : nChr > 47 && nChr < 58 ? nChr + 4 : nChr === 43 ? 62 : nChr === 47 ? 63 : 0;
        }

        function base64DecToArr(sBase64, nBlocksSize) {
            var
                sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, ""),
                nInLen = sB64Enc.length,
                nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2,
                taBytes = new Uint8Array(nOutLen);

            for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
                nMod4 = nInIdx & 3;
                nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
                if (nMod4 === 3 || nInLen - nInIdx === 1) {
                    for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
                        taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
                    }
                    nUint24 = 0;
                }
            }
            return taBytes;
        }</script>

</body>
</html>
